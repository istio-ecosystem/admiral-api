/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/istio-ecosystem/admiral-api/pkg/apis/admiral/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ShardLister helps list Shards.
// All objects returned here must be treated as read-only.
type ShardLister interface {
	// List lists all Shards in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Shard, err error)
	// Shards returns an object that can list and get Shards.
	Shards(namespace string) ShardNamespaceLister
	ShardListerExpansion
}

// shardLister implements the ShardLister interface.
type shardLister struct {
	indexer cache.Indexer
}

// NewShardLister returns a new ShardLister.
func NewShardLister(indexer cache.Indexer) ShardLister {
	return &shardLister{indexer: indexer}
}

// List lists all Shards in the indexer.
func (s *shardLister) List(selector labels.Selector) (ret []*v1.Shard, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Shard))
	})
	return ret, err
}

// Shards returns an object that can list and get Shards.
func (s *shardLister) Shards(namespace string) ShardNamespaceLister {
	return shardNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ShardNamespaceLister helps list and get Shards.
// All objects returned here must be treated as read-only.
type ShardNamespaceLister interface {
	// List lists all Shards in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Shard, err error)
	// Get retrieves the Shard from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.Shard, error)
	ShardNamespaceListerExpansion
}

// shardNamespaceLister implements the ShardNamespaceLister
// interface.
type shardNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Shards in the indexer for a given namespace.
func (s shardNamespaceLister) List(selector labels.Selector) (ret []*v1.Shard, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Shard))
	})
	return ret, err
}

// Get retrieves the Shard from the indexer for a given namespace and name.
func (s shardNamespaceLister) Get(name string) (*v1.Shard, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("shard"), name)
	}
	return obj.(*v1.Shard), nil
}
