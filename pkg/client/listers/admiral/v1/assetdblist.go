/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/istio-ecosystem/admiral-api/pkg/apis/admiral/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AssetDBListLister helps list AssetDBLists.
// All objects returned here must be treated as read-only.
type AssetDBListLister interface {
	// List lists all AssetDBLists in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.AssetDBList, err error)
	// AssetDBLists returns an object that can list and get AssetDBLists.
	AssetDBLists(namespace string) AssetDBListNamespaceLister
	AssetDBListListerExpansion
}

// assetDBListLister implements the AssetDBListLister interface.
type assetDBListLister struct {
	indexer cache.Indexer
}

// NewAssetDBListLister returns a new AssetDBListLister.
func NewAssetDBListLister(indexer cache.Indexer) AssetDBListLister {
	return &assetDBListLister{indexer: indexer}
}

// List lists all AssetDBLists in the indexer.
func (s *assetDBListLister) List(selector labels.Selector) (ret []*v1.AssetDBList, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AssetDBList))
	})
	return ret, err
}

// AssetDBLists returns an object that can list and get AssetDBLists.
func (s *assetDBListLister) AssetDBLists(namespace string) AssetDBListNamespaceLister {
	return assetDBListNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AssetDBListNamespaceLister helps list and get AssetDBLists.
// All objects returned here must be treated as read-only.
type AssetDBListNamespaceLister interface {
	// List lists all AssetDBLists in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.AssetDBList, err error)
	// Get retrieves the AssetDBList from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.AssetDBList, error)
	AssetDBListNamespaceListerExpansion
}

// assetDBListNamespaceLister implements the AssetDBListNamespaceLister
// interface.
type assetDBListNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AssetDBLists in the indexer for a given namespace.
func (s assetDBListNamespaceLister) List(selector labels.Selector) (ret []*v1.AssetDBList, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AssetDBList))
	})
	return ret, err
}

// Get retrieves the AssetDBList from the indexer for a given namespace and name.
func (s assetDBListNamespaceLister) Get(name string) (*v1.AssetDBList, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("assetdblist"), name)
	}
	return obj.(*v1.AssetDBList), nil
}
