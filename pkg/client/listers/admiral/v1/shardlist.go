/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/istio-ecosystem/admiral-api/pkg/apis/admiral/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ShardListLister helps list ShardLists.
// All objects returned here must be treated as read-only.
type ShardListLister interface {
	// List lists all ShardLists in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ShardList, err error)
	// ShardLists returns an object that can list and get ShardLists.
	ShardLists(namespace string) ShardListNamespaceLister
	ShardListListerExpansion
}

// shardListLister implements the ShardListLister interface.
type shardListLister struct {
	indexer cache.Indexer
}

// NewShardListLister returns a new ShardListLister.
func NewShardListLister(indexer cache.Indexer) ShardListLister {
	return &shardListLister{indexer: indexer}
}

// List lists all ShardLists in the indexer.
func (s *shardListLister) List(selector labels.Selector) (ret []*v1.ShardList, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ShardList))
	})
	return ret, err
}

// ShardLists returns an object that can list and get ShardLists.
func (s *shardListLister) ShardLists(namespace string) ShardListNamespaceLister {
	return shardListNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ShardListNamespaceLister helps list and get ShardLists.
// All objects returned here must be treated as read-only.
type ShardListNamespaceLister interface {
	// List lists all ShardLists in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ShardList, err error)
	// Get retrieves the ShardList from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.ShardList, error)
	ShardListNamespaceListerExpansion
}

// shardListNamespaceLister implements the ShardListNamespaceLister
// interface.
type shardListNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ShardLists in the indexer for a given namespace.
func (s shardListNamespaceLister) List(selector labels.Selector) (ret []*v1.ShardList, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ShardList))
	})
	return ret, err
}

// Get retrieves the ShardList from the indexer for a given namespace and name.
func (s shardListNamespaceLister) Get(name string) (*v1.ShardList, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("shardlist"), name)
	}
	return obj.(*v1.ShardList), nil
}
